swagger: '2.0'
info:
  description: Operations can be done with OpenArchi models.
  version: 1.0.0
  title: OpenArchi API
  contact:
    email: araguacaima@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: ${DEPLOYED_SERVER}
tags:
- name: Prototyper
  description: Visual prototyper functionalities
- name: Editor
  description: Visual editor functionalities
- name: Models
  description: Set of functionalities related to model agnostically to its type
- name: Diagrams
  description: Specific functionalities related to each kind of to model type
- name: Consumers
  description: Manage every kind of possible consumer of a model
- name: Capabilities
  description: Establish capabilities for every element to be used for models and diagrams evaluation
- name: Catalogs
  description: Manage a set of useful catalogs of common info about models, diagrams and consumers
- name: Palettes
  description: Expose the kind of graphical elements that can be used within models according to its type.
schemes:
- http
- https
paths:
  "/prototyper":
    get:
      tags:
      - Prototyper
      summary: Shows a prototyper according to the kind or name of the model
      description: Shows a prototyper according to the kind or name of the model. If no model match with the requested criteria, am empty prototyper is returned. No error is raised
      operationId: get-prototyper
      produces:
      - text/html
      parameters:
      - name: "kind"
        in: query
        description: Load prototyper according to kind of the model
        required: true
        type: string
      - name: "name"
        in: query
        description: Load prototyper according to model name. This attribute is case-sensitive
        required: true
        type: string
      responses:
        '200':
          description: OK
      security:
      - openarchi_auth:
        - read:models
  "/prototyper/{model-id}":
    get:
      tags:
      - Prototyper
      summary: Shows a prototyper for a specific model by its ID
      description: Shows a prototyper for a specific model by its ID. If no model match with the requested ID, am empty prototyper is returned. No error is raised
      operationId: get-prototyper-by-model-id
      produces:
      - text/html
      parameters:
      - name: model-id
        in: path
        description: ID of the model to show in the prototyper
        required: true
        type: string
      responses:
        '200':
          description: OK
      security:
      - openarchi_auth:
        - read:models
  "/editor":
    get:
      tags:
      - Editor
      summary: Shows an editor according to the kind or name of the model
      description: Shows an editor according to the kind or name of the model. If no model match with the requested criteria, am empty editor is returned. No error is raised
      operationId: get-editor
      produces:
      - text/html
      parameters:
      - name: "kind"
        in: query
        description: Load editor according to kind of the model
        required: true
        type: string
      - name: "name"
        in: query
        description: Load editor according to model name. This attribute is case-sensitive
        required: true
        type: string
      responses:
        '200':
          description: OK
      security:
      - openarchi_auth:
        - read:models
  "/editor/{model-id}":
    get:
      tags:
      - Editor
      summary: Shows a editor for a specific model by its ID
      description: Shows a editor for a specific model by its ID. If no model match with the requested ID, am empty editor is returned. No error is raised
      operationId: get-editor-by-model-id
      produces:
      - text/html
      parameters:
      - name: model-id
        in: path
        description: ID of the model to show in the editor
        required: true
        type: string
      responses:
        '200':
          description: OK
      security:
      - openarchi_auth:
        - read:models        
  "/api/models":
#    options:
#      tags:
#      - Models
#      summary: Shows options for models object
#      operationId: options-models
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models
      description: This service supports query by using RSQL expressions. Also, supports filtering by nested fields
      operationId: get-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      - name: "fieldsToInclude"
        in: query
        description: Truncates models output by keeping only provided comma separated fields. Nested fields are permitted
        required: false
        type: string
      - name: "fieldsToExclude"
        in: query
        description: Truncates models output by excluding provided comma separated fields. Nested fields are permitted
        required: false
        type: string
      - name: "usagesByName"
        in: query
        description: Find all usages of any kind of element named as provided.
        required: false
        type: string
      - name: "name"
        in: query
        description: Find all usages of any kind of element named as provided.
        required: false
        type: string
      - name: "kind"
        in: query
        type: string
        description: Type of element
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - BPM
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model
      description: ''
      operationId: add-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: "#/definitions/Model"
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/models/validate":
    post:
      tags:
        - Models
      summary: Obtain the validity of a provided model
      description: Obtain a set of messages from a validation process regarding the provided model
      operationId: validate-model
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Model object that needs to be validated
          required: true
          schema:
            $ref: "#/definitions/Model"
        - name: rulesPath
          in: query
          description: Path that identifies the rule that belongs to the repository provided. This param should be provided together with 'rulesRepositoryStrategy' and 'urlResourceStrategy'
          required: false
          type: string
        - name: rulesRepositoryStrategy
          in: query
          description: Strategy to gather the rules repository. This param should be provided together with 'rulesPath' and 'urlResourceStrategy'
          required: false
          type: string
          enum:
            - DRL
            - DECISION_TABLE
        - name: urlResourceStrategy
          in: query
          description: Strategy to build an effective URL path on where rules are. This param should be provided together with 'rulesPath' and 'rulesRepositoryStrategy'
          required: false
          type: string
          enum:
            - WORKBENCH
            - MAVEN
            - ABSOLUTE_DECISION_TABLE_PATH
            - GOOGLE_DRIVE_DECISION_TABLE_PATH
            - ABSOLUTE_DRL_PATH
      responses:
        '202':
          description: Accepted
          schema:
            type: array
            items:
              $ref: "#/definitions/Rule_Message"
        '405':
          description: Invalid input
  "/api/models/batch":
#    options:
#      tags:
#      - Models
#      summary: Shows options for batch models objects processing
#      operationId: options-models-batch
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            $ref: "#/definitions/Options_Post_Collection"
    post:
      tags:
      - Models
      summary: Add a list of models
      description: ''
      operationId: add-models
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: List of model objects that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: "#/definitions/Model_Create"
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/models/:model-id":
#    options:
#      tags:
#      - Models
#      summary: Shows options for a specific model object
#      operationId: options-model
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            $ref: "#/definitions/Options_Get"
  "/api/models/{model-id}":
    get:
      tags:
      - Models
      summary: Find a model by ID
      description: Returns a single model
      operationId: get-model-by-id
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/Model"
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
    delete:
      tags:
      - Models
      summary: Delete a model by id
      description: Delete a model by its identifier. This opertation can not be undone.
      operationId: delete-model-by-id
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to delete
        required: true
        type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
      security:
      - openarchi_auth:
        - delete:model
    put:
      tags:
      - Models
      summary: completely replace an existent model
      description: If the model object does not exists previously, it won't be created, instead, an error will be raised. The existent model will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to replace
        required: true
        type: string
      - name: body
        in: body
        description: Model object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Model_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
      security:
      - openarchi_auth:
        - write:model
        - read:models          
#  "/models/:model-id/children":
#    options:
#      tags:
#      - Models
#      summary: Shows options for the children objects of a specific model
#      operationId: options-model-children
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Put"
  "/api/models/{model-id}/clone":
    get:
      tags:
      - Models
      summary: Gets a clone of the model associated with the incoming ID
      description: Returns a single cloned model
      operationId: clone-model-by-id
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: "suffix"
        in: query
        description: Suffix proposed for the name of the cloned model
        required: false
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/Model"
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
  "/api/models/{model-id}/status/{statud-id}":
    put:
      tags:
      - Models
      summary: Replace the current status of the model
      description: Replace the current status of the model
      operationId: replace-model-status
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: statud-id
        in: path
        description: ID of the status for replacing
        required: true
        type: string
        enum:
        - INITIAL
        - PROPOSAL
        - IN_PROGRESS
        - PUBLISHED
        - DEPRECATED
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/models/{model-id}/image":
    get:
      tags:
      - Models
      summary: Get the image that represents this model. Each model can handle only one image
      description: This service supports query by using RSQL expressions
      operationId: get-model-image
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model for retrieving its image
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Composite_Element"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add or replace an image to the model
      description: If the image does not exists previously, it will be created, otherwise it will be replaced.
      operationId: add-model-image
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model for adding it an image
        required: true
        type: string
      - in: body
        name: body
        description: Image object that needs to be added to the model
        required: true
        schema:
          $ref: "#/definitions/Image_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/models/{model-id}/children":
    get:
      tags:
      - Models
      summary: Finds children of a model
      description: This service supports query by using RSQL expressions
      operationId: get-model-children
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter children of a model according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Composite_Element"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add a new child to the model
      description: If the child object does not exists previously, it will be created.
      operationId: add-model-child
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - in: body
        name: body
        description: Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Composite_Element_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/models/:model-id/parent":
#    options:
#      tags:
#      - Models
#      summary: Shows options for the parent object of a specific model
#      operationId: options-model-parent
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get"
#            - $ref: "#/definitions/Options_Post"
  "/api/models/{model-id}/parent":
    get:
      tags:
      - Models
      summary: Find the parent of a model
      description: Gets the full info related to the parent of the model
      operationId: get-model-parent
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a parent to the current model
      description: Relates an existing model as a parent of the current one. If parent model does not exists an error will occur. Only model parent id is required
      operationId: add-model-parent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - in: body
        name: body
        description: Model object that needs to be added as a parent of the current model
        required: true
        schema:
          $ref: "#/definitions/Model_Parent_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/models/:model-id/meta-data":
#    options:
#      tags:
#      - Models
#      summary: Shows options for the meta data info of a specific model
#      operationId: options-model-meta-data
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get"
#            - $ref: "#/definitions/Options_Post"
  "/api/models/{model-id}/meta-data":
    get:
      tags:
      - Models
      summary: Get the model's meta data
      description: Gets the full meta data info related to the model
      operationId: get-model-meta-data
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its meta data
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Meta_Data"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add the meta-data of the current model
      description: Add the meta-data of the current model
      operationId: add-meta-data
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add meta data
        required: true
        type: string
      - in: body
        name: body
        description: MetaData object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Meta_Data_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/models/:model-id/features":
#    options:
#      tags:
#      - Models
#      summary: Shows options for the features of a specific model
#      operationId: options-model-features
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Put"
  "/api/models/{model-id}/features":
    get:
      tags:
      - Models
      summary: Get the model's features
      description: Gets the full features info related to the model
      operationId: get-model-features
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its features
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Feature"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add a feature to the current model
      description: Add a feature to the current model
      operationId: add-feature
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add the feature
        required: true
        type: string
      - in: body
        name: body
        description: Feature object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Feature_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/models/{model-id}/meta":
     get:
       tags:
       - Models
       summary: Get the meta info related to this model. Each model can handle only one meta info. Each meta info can contain multiple versions, belonging to an history on which only one of it its marked as 'active'
       description: This service supports query by using RSQL expressions
       operationId: get-model-meta
       produces:
       - application/json
       parameters:
       - name: model-id
         in: path
         description: ID of the model for retrieving its meta info
         required: true
         type: string
       responses:
         '200':
           description: OK
           schema:
             $ref: "#/definitions/Meta_Info"
         '400':
           description: Bad request
       security:
       - openarchi_auth:
         - read:models
  "/api/models/{model-id}/meta/history":
     get:
       tags:
       - Models
       summary: Get the history of versions related to this model. Each model can handle several versions, but only one of those can be considered as the 'active' one.
       description: This service supports query by using RSQL expressions
       operationId: get-model-meta-history
       produces:
       - application/json
       parameters:
       - name: model-id
         in: path
         description: ID of the model for retrieving its meta info
         required: true
         type: string
       responses:
         '200':
           description: OK
           schema:
             type: array
             items:
               $ref: "#/definitions/History_List"
         '400':
           description: Bad request
       security:
       - openarchi_auth:
         - read:models
     post:
       tags:
       - Models
       summary: Add a new entry of the history of versions for the current model's meta info
       description: Add the meta-data of the current model
       operationId: add-history
       consumes:
       - application/json
       produces:
       - application/json
       parameters:
       - name: model-id
         in: path
         description: ID of the model to add history to its meta info
         required: true
         type: string
       - in: body
         name: body
         description: History object that needs to be added to the current model's meta info
         required: true
         schema:
           $ref: "#/definitions/History_Create"
       responses:
         '200':
           description: Accepted
         '201':
           description: Created
         '405':
           description: Invalid input
       security:
       - openarchi_auth:
         - write:model
         - read:models
  "/api/diagrams/architectures":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for architecture diagram
#      operationId: options-architecture
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Diagrams
      summary: Finds models of the type architecture
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new model of the type architecture
      description: ''
      operationId: add-architecture-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Architecture Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/diagrams/architectures/:model-id/relationships":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for the relationships of a specific model
#      operationId: options-model-relationships
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Put"
  "/api/diagrams/architectures/{model-id}":
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent architecture diagram
      description: If the architecture diagram model does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-architecture-diagram
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to update
        required: true
        type: string
      - name: body
        in: body
        description: Model object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Model not found
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/layers":
    get:
      tags:
      - Diagrams
      summary: Finds layers within the model
      description: This service supports query by using RSQL expressions
      operationId: get-layers
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to update
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter layers according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Layer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Associate a new or preexistent layer to the provided model
      description: If the layer does not exists previously, it will be created, otherwise it willbe merged.
      operationId: add-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to update
        required: true
        type: string
      - in: body
        name: body
        description: Layer that needs to be associated to the povided model
        required: true
        schema:
          $ref: "#/definitions/Layer_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/layers/{layer-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a specific layer within the provided model
      description: Finds a specific layer within the provided model
      operationId: get-architecture-layer
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to update
        required: true
        type: string
      - name: layer-id
        in: path
        description: ID of the layer to get
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Layer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent layer within the provided model
      description: If the layer does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-architecture-model-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to update
        required: true
        type: string
      - name: layer-id
        in: path
        description: ID of the layer to be partially updated
        required: true
        type: string
      - name: body
        in: body
        description: Layer object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Layer_Create"
      responses:
        '200':
          description: OK
        '404':
          description: Layer not found
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent layer within the provided model
      description: If the layer object does not exists previously, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-model-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the container belongs
        required: true
        type: string
      - name: layer-id
        in: path
        description: ID of the layer to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Layer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/relationships":
    get:
      tags:
      - Diagrams
      summary: Get the model's relationships
      description: Gets the full relationships info related to the model
      operationId: get-model-relationships
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its relationships
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Relationship"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Diagrams
      summary: Add a relationship to the current model
      description: Add a relationship to the current model
      operationId: add-relationship
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add the relationship
        required: true
        type: string
      - in: body
        name: body
        description: Relationship object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Architecture_Relationship_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
#  "/diagrams/architectures/:model-id/consumers":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for the consumers of a specific model
#      operationId: options-model-consumers
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Put"
  "/api/diagrams/architectures/{model-id}/consumers":
    get:
      tags:
      - Diagrams
      summary: Finds consumers of a model
      description: This service supports query by using RSQL expressions
      operationId: get-model-consumers
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter consumers of a model according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Consumer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new consumer to the model
      description: If the consumer object does not exists previously, it will be created.
      operationId: add-model-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - in: body
        name: body
        description: Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/consumers/{consumer-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a consumer of a model
      description: Finds a consumer of a model
      operationId: get-model-consumer
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the consumer belongs
        required: true
        type: string
      - name: consumer-id
        in: path
        description: ID of the consumer to update
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Consumer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent model's consumer
      description: If the consumer object does not exists previously, or it doesn't belongs to the provided model, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-architecture-model-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the consumer belongs
        required: true
        type: string
      - name: consumer-id
        in: path
        description: ID of the consumer to update
        required: true
        type: string
      - name: body
        in: body
        description: Consumer object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Consumer not found
        '405':
          description: Consumer does not belongs to model
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent model's consumer
      description: If the consumer object does not exists previously, or it doesn't belongs to the provided model, it won't be created, instead, an error will be raised. The existent consumer will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-model-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the consumer belongs
        required: true
        type: string
      - name: consumer-id
        in: path
        description: ID of the consumer to replace
        required: true
        type: string
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Consumer not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/systems":
    get:
      tags:
      - Diagrams
      summary: Finds systems
      description: This service supports query by using RSQL expressions
      operationId: get-all-systems
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter systems according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/System"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new system
      description: If the system does not exists previously, it will be created, otherwise an error will be rised.
      operationId: add-architecture-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: System that needs to be added
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/systems/{system-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a specific system
      description: Finds a specific system
      operationId: get-architecture-system-by-id
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system to get
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/System"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent system
      description: If the system does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-architecture-model-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system to be partially updated
        required: true
        type: string
      - name: body
        in: body
        description: System object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: OK
        '404':
          description: System not found
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent system
      description: If the system object does not exists previously, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-architecturemodel-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/systems/{system-id}/systems":
    get:
      tags:
      - Diagrams
      summary: Finds systems for the system
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-system-systems
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter systems of a system according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/System"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new system to the specified system
      description: Only if the system object does not exists previously, it will be created, otherwise an error will be raised.
      operationId: add-system-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - in: body
        name: body
        description: System that needs to be added
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/layers/{layer-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a specific layer
      description: Finds a specific layer
      operationId: get-layer
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to get
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Layer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent layer
      description: If the layer does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-model-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to be partially updated
        required: true
        type: string
      - name: body
        in: body
        description: Layer object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Layer_Create"
      responses:
        '200':
          description: OK
        '404':
          description: Layer not found
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent layer
      description: If the layer object does not exists previously, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-architecture-model-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Layer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/layers/{layer-id}/systems":
    get:
      tags:
      - Diagrams
      summary: Finds systems for the layer
      description: This service supports query by using RSQL expressions
      operationId: get-layer-systems
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter systemss of a layer according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/System"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new system to the specified layer
      description: Only if the system object does not associeted exists previously with the layer, it will be created, otherwise an error will be raised.
      operationId: add-system-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - in: body
        name: body
        description: System that needs to be added
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/layers/{layer-id}/systems/{system-id}":
    delete:
      tags:
      - Diagrams
      summary: Remove a system from its layer by id
      description: Remove a system from its layer by its identifier. This opertation can not be undone. Refered system reamins as an independent element, but only it won't be associated as a part of the systems of the layer
      operationId: delete-system-of-layer-by-id
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to with is desired to remove the system
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of system to be removed from the layer's systems list
        required: true
        type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Layer or system not found
      security:
      - openarchi_auth:
        - delete:model
  "/api/diagrams/architectures/layers/{layer-id}/containers":
    get:
      tags:
      - Diagrams
      summary: Finds containers for the layer
      description: This service supports query by using RSQL expressions
      operationId: get-layer-containers
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter containerss of a layer according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Container"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new container to the specified layer
      description: Only if the container object does not associeted exists previously with the layer, it will be created, otherwise an error will be raised.
      operationId: add-container-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - in: body
        name: body
        description: Container that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/layers/{layer-id}/containers/{container-id}":
    delete:
      tags:
      - Diagrams
      summary: Remove a container from its layer by id
      description: Remove a container from its layer by its identifier. This opertation can not be undone. Refered container reamins as an independent element, but only it won't be associated as a part of the containers of the layer
      operationId: delete-container-of-layer-by-id
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to with is desired to remove the container
        required: true
        type: string
      - name: container-id
        in: path
        description: ID of container to be removed from the layer's containers list
        required: true
        type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Layer or container not found
      security:
      - openarchi_auth:
        - delete:model
  "/api/diagrams/architectures/layers/{layer-id}/components":
    get:
      tags:
      - Diagrams
      summary: Finds components for the layer
      description: This service supports query by using RSQL expressions
      operationId: get-layer-components
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter componentss of a layer according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new component to the specified layer
      description: Only if the component object does not associeted exists previously with the layer, it will be created, otherwise an error will be raised.
      operationId: add-component-layer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer
        required: true
        type: string
      - in: body
        name: body
        description: Component that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/layers/{layer-id}/components/{component-id}":
    delete:
      tags:
      - Diagrams
      summary: Remove a component from its layer by id
      description: Remove a component from its layer by its identifier. This opertation can not be undone. Refered component reamins as an independent element, but only it won't be associated as a part of the components of the layer
      operationId: delete-component-of-layer-by-id
      produces:
      - application/json
      parameters:
      - name: layer-id
        in: path
        description: ID of the layer to with is desired to remove the component
        required: true
        type: string
      - name: component-id
        in: path
        description: ID of component to be removed from the layer's components list
        required: true
        type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Layer or component not found
      security:
      - openarchi_auth:
        - delete:model
  "/api/diagrams/architectures/systems/{system-id}/containers":
    get:
      tags:
      - Diagrams
      summary: Finds containers for the system
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-system-containers
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter containers of a system according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Container"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new container to the specified system
      description: Only if the container object does not exists previously, it will be created, otherwise an error will be raised.
      operationId: add-architecture-system-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - in: body
        name: body
        description: Container that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models        
  "/api/diagrams/architectures/systems/{system-id}/components":
    get:
      tags:
      - Diagrams
      summary: Finds components for the system
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-system-components
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter components of a system according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new component to the specified system
      description: Only if the component object does not exists previously, it will be created, otherwise an error will be raised.
      operationId: add-system-component
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - in: body
        name: body
        description: Component that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/containers":
    get:
      tags:
      - Diagrams
      summary: Finds containers
      description: This service supports query by using RSQL expressions
      operationId: get-containers
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter containers according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Container"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new container
      description: If the container does not exists previously, it will be created, otherwise an error will be rised.
      operationId: add-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Container that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/containers/{container-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a specific container
      description: Finds a specific container
      operationId: get-container
      produces:
      - application/json
      parameters:
      - name: container-id
        in: path
        description: ID of the container to retrieve
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Container"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent container
      description: If the container object does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: container-id
        in: path
        description: ID of the container to update
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Container not found
        '405':
          description: Container does not belongs to model
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent container
      description: If the container object does not exists previously, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this method.
      operationId: completely-update-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: container-id
        in: path
        description: ID of the container to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/containers/{container-id}/components":
    get:
      tags:
      - Diagrams
      summary: Finds components for the container
      description: This service supports query by using RSQL expressions
      operationId: get-container-components
      produces:
      - application/json
      parameters:
      - name: container-id
        in: path
        description: ID of the container
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter components of a container according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
        '400':
          description: Bad request
        '404':
          description: Service not found
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new component to the specified container
      description: Only if the component object does not exists previously, it will be created, otherwise an error will be raised.
      operationId: add-container-component
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: container-id
        in: path
        description: ID of the container
        required: true
        type: string
      - in: body
        name: body
        description: Component that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models  
  "/api/diagrams/architectures/components":
    get:
      tags:
      - Diagrams
      summary: Finds components
      description: This service supports query by using RSQL expressions
      operationId: get-components
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter components according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new component
      description: If the component does not exists previously, it will be created, otherwise an error will be rised.
      operationId: add-component
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Component that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/components/{component-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a specific component
      description: Finds a specific component
      operationId: get-component
      produces:
      - application/json
      parameters:
      - name: component-id
        in: path
        description: ID of the component to retrieve
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Component"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent component
      description: If the component object does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-component
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: component-id
        in: path
        description: ID of the component to update
        required: true
        type: string
      - name: body
        in: body
        description: Component object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Component not found
        '405':
          description: Component does not belongs to model
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent component
      description: If the component object does not exists previously, it won't be created, instead, an error will be raised. The existent component will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this method.
      operationId: completely-update-component
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: component-id
        in: path
        description: ID of the component to replace
        required: true
        type: string
      - name: body
        in: body
        description: Component object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Component_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Component not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models

  "/api/diagrams/architectures/{model-id}/systems":
    get:
      tags:
      - Diagrams
      summary: Finds the systems of a model
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-systems
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter containers of a system within a model according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/System"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new system to the specified model
      description: If the system does not exists previously, it will be created, otherwise an error will be rised.
      operationId: add-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the system to which the container will be created
        required: true
        type: string
      - in: body
        name: body
        description: Container that needs to be added
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/systems/{system-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a system of a model
      description: Finds a system of a model
      operationId: get-system
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system to get
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/System"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent system of the specified model
      description: If the system does not exists previously, or it doesn't belongs to the provided model, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-model-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the system and the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system to update
        required: true
        type: string
      - name: body
        in: body
        description: System object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Container not found
        '405':
          description: Container does not belongs to model
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent model's system
      description: If the system object does not exists previously, or it doesn't belongs to the provided model, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-model-system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/System_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/systems/{system-id}/containers":
    get:
      tags:
      - Diagrams
      summary: Finds containers for the system of a model
      description: This service supports query by using RSQL expressions
      operationId: get-system-containers
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: "query"
        in: query
        description: Filter containers of a system within a model according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Container"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new container to the specified system of the model
      description: If the container object does not exists previously, it will be created.
      operationId: add-system-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the system to which the container will be created
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - in: body
        name: body
        description: Container that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/architectures/{model-id}/systems/{system-id}/containers/{container-id}":
    get:
      tags:
      - Diagrams
      summary: Finds a container of a system of a model
      description: Finds a container of a system of a model
      operationId: get-system-container
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: container-id
        in: path
        description: ID of the container to update
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Container"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    patch:
      tags:
      - Diagrams
      summary: Partially update an existent container of the specified system of a model
      description: If the container object does not exists previously, or it doesn't belongs to the provided model, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-model-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the system and the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: container-id
        in: path
        description: ID of the container to update
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid model id supplied
        '404':
          description: Container not found
        '405':
          description: Container does not belongs to model
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Diagrams
      summary: completely update an existent model's container
      description: If the container object does not exists previously, or it doesn't belongs to the provided model, it won't be created, instead, an error will be raised. The existent container will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-model-container
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which the container belongs
        required: true
        type: string
      - name: system-id
        in: path
        description: ID of the system
        required: true
        type: string
      - name: container-id
        in: path
        description: ID of the container to replace
        required: true
        type: string
      - name: body
        in: body
        description: Container object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Container_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Container not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/bpms":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for BPM diagram
#      operationId: options-bpm
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Diagrams
      summary: Finds models of the type bpm
      description: This service supports query by using RSQL expressions
      operationId: get-bpm-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/BPM_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new model of the type bpm
      description: ''
      operationId: add-bpm-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Bpm Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/BPM_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/flowcharts":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for flowcharts diagram
#      operationId: options-flowcharts
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Diagrams
      summary: Finds models of the type flowchart
      description: This service supports query by using RSQL expressions
      operationId: get-flowchart-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Flowchart_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new model of the type flowchart
      description: ''
      operationId: add-flowchart-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Flowchart Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Flowchart_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/gantts":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for gantts diagram
#      operationId: options-gantt
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Diagrams
      summary: Finds models of the type gantt
      description: This service supports query by using RSQL expressions
      operationId: get-gantt-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Gantt_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new model of the type gantt
      description: ''
      operationId: add-gantt-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Gantt Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Gantt_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/diagrams/sequences":
#    options:
#      tags:
#      - Diagrams
#      summary: Shows options for sequences diagram
#      operationId: options-sequence
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Diagrams
      summary: Finds models of the type sequence
      description: This service supports query by using RSQL expressions
      operationId: get-sequence-models
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Sequence_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Diagrams
      summary: Add a new model of the type sequence
      description: ''
      operationId: add-sequence-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Sequence Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Sequence_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - read:models
#  "/consumers/:model-id":
#    options:
#      tags:
#      - Consumers
#      summary: Shows options for the consumers
#      operationId: options-consumers
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Collection"
#            - $ref: "#/definitions/Options_Put"
  "/api/consumers":
    get:
      tags:
      - Consumers
      summary: Finds consumers
      description: This service supports query by using RSQL expressions
      operationId: get-consumers
      produces:
      - application/json
      parameters:
      - name: "query"
        in: query
        description: Filter consumers according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Consumer"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Consumers
      summary: Add a new consumer
      description: If the consumer object exists previously an error will be raised.
      operationId: add-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Consumer object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/consumers/{consumer-id}":
    get:
      tags:
      - Consumers
      summary: Find a consumer by ID
      description: Returns a single consumer
      operationId: get-consumer-by-id
      produces:
      - application/json
      parameters:
      - name: consumer-id
        in: path
        description: ID of the consumer to return
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Consumer"
        '404':
          description: Consumer not found
    patch:
      tags:
      - Consumers
      summary: Partially update an existent consumer
      description: If the consumer object does not exists previously an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: consumer-id
        in: path
        description: ID of the consumer to update
        required: true
        type: string
      - name: body
        in: body
        description: Consumer object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Consumer not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
    put:
      tags:
      - Consumers
      summary: completely update an existent consumer
      description: If the consumer object does not exists previously, it won't be created, instead, an error will be raised. The existent consumer will be deleted completely before updating, so the default values will be taken for any non-existent value in the request of this mmethod.
      operationId: completely-update-consumer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: consumer-id
        in: path
        description: ID of the consumer to replace
        required: true
        type: string
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Consumer_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Consumer not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/api/catalogs/diagram-types":
#    options:
#      tags:
#      - Catalogs
#      summary: Shows options for catalogs of diagram types
#      operationId: options-catalogs-diagram-types
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_String_Collection"
#            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds diagram's types
      description: Returns all permitted and implemented diagram types
      operationId: get-diagram-types
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    post:
      tags:
      - Catalogs
      summary: Request for the addition of a new diagram type
      description: ''
      operationId: post-diagram-types
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Diagram type that needs to be added
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Accepted
        '501':
          description: Not implemented
      security:
      - openarchi_auth:
        - write:catalog
        - read:catalogs
  "/api/catalogs/diagram-types/{diagram-type-id}/shape":
    get:
      tags:
      - Catalogs
      summary: Finds shapes
      description: Returns the shape asociated with the incoming element
      operationId: get-diagram-type-shape
      produces:
      - application/json
      parameters:
      - name: "diagram-type-id"
        in: path
        description: The incoming element type for searching its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Element_Shape"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    put:
      tags:
      - Catalogs
      summary: completely update an existent element shape or creates a new one
      description: If the element shape object does not exists previously, it will be created. The existent element shape will be deleted completely before updating, so the element shape remains only those fields passed in this request.
      operationId: completely-update-diagram-element-shape
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "diagram-type-id"
        in: path
        description: The incoming element type for replacing or creating its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Element_Shape_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Element type not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:catalog
  "/api/catalogs/diagram-types/{diagram-type-id}/shape/color-schemes":
    get:
      tags:
      - Catalogs
      summary: Finds color schemes asociated to the incoming shape of the element type
      description: Returns the color scheme asociated with the shape of the incoming element type
      operationId: get-diagram-type-shape-color-scheme
      produces:
      - application/json
      parameters:
      - name: "diagram-type-id"
        in: path
        description: The incoming element type for searching the color scheme of its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Color_Scheme"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    put:
      tags:
      - Catalogs
      summary: completely update an existent color scheme of the shape of the related element type or creates a new one
      description: If the color scheme object does not exists previously, it will be created. The existent color scheme will be deleted completely before updating, so from the color scheme remains only those fields passed in this request.
      operationId: completely-update-diagram-type-color-scheme
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "diagram-type-id"
        in: path
        description: The incoming element type for replacing or creating its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Color_Scheme_Create"
      responses:
        '201':
          description: Created
        '202':
          description: Accepted
        '400':
          description: Invalid ID supplied
        '404':
          description: Element type not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:catalog
  "/api/catalogs/element-types/{element-type-id}/shape":
    get:
      tags:
      - Catalogs
      summary: Finds shapes
      description: Returns the shape asociated with the incoming element
      operationId: get-element-type-shape
      produces:
      - application/json
      parameters:
      - name: "element-type-id"
        in: path
        description: The incoming element type for searching its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Element_Shape"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    put:
      tags:
      - Catalogs
      summary: completely update an existent element shape or creates a new one
      description: If the element shape object does not exists previously, it will be created. The existent element shape will be deleted completely before updating, so the element shape remains only those fields passed in this request.
      operationId: completely-update-element-shape
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "element-type-id"
        in: path
        description: The incoming element type for replacing or creating its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Element_Shape_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Element type not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:catalog
  "/api/catalogs/element-types/{element-type-id}/shape/color-schemes":
    get:
      tags:
      - Catalogs
      summary: Finds color schemes asociated to the incoming shape of the element type
      description: Returns the color scheme asociated with the shape of the incoming element type
      operationId: get-element-type-shape-color-scheme
      produces:
      - application/json
      parameters:
      - name: "element-type-id"
        in: path
        description: The incoming element type for searching the color scheme of its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Color_Scheme"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    put:
      tags:
      - Catalogs
      summary: completely update an existent color scheme of the shape of the related element type or creates a new one
      description: If the color scheme object does not exists previously, it will be created. The existent color scheme will be deleted completely before updating, so from the color scheme remains only those fields passed in this request.
      operationId: completely-update-element-type-color-scheme
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "element-type-id"
        in: path
        description: The incoming element type for replacing or creating its shape
        required: true
        type: string
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      - name: body
        in: body
        description: Consumer object that needs to be replaced
        required: true
        schema:
          $ref: "#/definitions/Color_Scheme_Create"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Element type not found
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:catalog
  "/api/catalogs/color-schemes/{color-scheme-id}":
    get:
      tags:
      - Catalogs
      summary: Finds Color Schemes
      description: Returns the color scheme asociated with the incoming id
      operationId: get-color-schemes
      produces:
      - application/json
      parameters:
      - name: "color-scheme-id"
        in: path
        description: The incoming id of the color scheme to search for
        required: true
        type: string
        enum:
          - PRIMARY
          - SECONDARY
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Color_Scheme"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    patch:
      tags:
      - Catalogs
      summary: Partially update an existent color scheme
      description: If the color scheme does not exists previously, an error will be raised. Only incoming attributes will be affected. All preexisting values for non-requested fields will keep its current stored values.
      operationId: partially-update-color-scheme
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: color-scheme-id
        in: path
        description: ID of the color scheme to be partially updated
        required: true
        type: string
      - name: body
        in: body
        description: Color scheme object that needs to be partially updated
        required: true
        schema:
          $ref: "#/definitions/Color_Scheme_Create"
      responses:
        '200':
          description: OK
        '404':
          description: Color scheme not found
        '409':
          description: Color scheme can not be updated
      security:
      - openarchi_auth:
        - write:catalog
        - read:catalogs
  "/api/catalogs/prototype-names":
#    options:
#      tags:
#      - Catalogs
#      summary: Shows options for catalogs of prototype names
#      operationId: options-catalogs-prototype-names
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Id_Name_Collection"
#            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds prototype's names
      description: Returns all permitted and implemented prototype's names
      operationId: get-prototypes-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
  "/api/catalogs/diagram-names":
#    options:
#      tags:
#      - Catalogs
#      summary: Shows options for catalogs of diagram names
#      operationId: options-catalogs-diagram-names
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Id_Name_Collection"
#            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds diagram's names
      description: Returns all permitted and implemented diagram's names
      operationId: get-diagrams-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
  "/api/catalogs/consumer-names":
#    options:
#      tags:
#      - Catalogs
#      summary: Shows options for catalogs of consumer names
#      operationId: options-catalogs-consumer-names
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: OK
#          schema:
#            allOf:
#            - $ref: "#/definitions/Options_Get_Id_Name_Collection"
#            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds consumer's names
      description: Returns all permitted and implemented consumer's names
      operationId: get-consumers-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
  "/api/catalogs/element-roles":
    get:
      tags:
      - Catalogs
      summary: Finds element's roles
      description: Returns all permitted element's roles
      operationId: get-element-roles
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Element_Role"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    post:
      tags:
      - Catalogs
      summary: Add a new element role
      description: If the element role exists previously an error will be raised.
      operationId: add-element-role
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Element role that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Element_Role_Create"
      responses:
        '200':
          description: Accepted
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:catalog
  "/api/catalogs/json-schema":
    get:
      tags:
        - Catalogs
      summary: Gets json-echema
      description: Returns all json-schemas
      operationId: get-json-schema
      produces:
        - application/json
      parameters:
        - in: query
          name: modelType
          description: Model type to get its json-schema
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
        '400':
          description: Bad request
      security:
        - openarchi_auth:
            - read:catalogs
  "/api/palette/architectures":
    get:
      tags:
      - Palettes
      summary: Finds elements belonging the palette of architecture models
      description: Returns an empty array if no elements can be found
      operationId: get-architecture-model-palette
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model_Palette"
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Palettes
      summary: Add a new element to the palette for architecture models
      description: Every request for addition of a new element to the pallete should be approved administrativelly before it could be used
      operationId: add-architecture-model-palette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Palette element for the Architecture Model that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Palette_Create"
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:palette
        - read:palettes
  "/api/palette/bpms":
    get:
      tags:
      - Palettes
      summary: Finds elements belonging the palette of bpm models
      description: Returns an empty array if no elements can be found
      operationId: get-bpm-model-palette
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/BPM_Model_Palette"
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Palettes
      summary: Add a new element to the palette for bpm models
      description: Every request for addition of a new element to the pallete should be approved administrativelly before it could be used
      operationId: add-bpm-model-palette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Palette element for the Bpm Model that needs to be added
        required: true
        schema:
          $ref: "#/definitions/BPM_Model_Palette_Create"
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:palette
        - read:palettes
  "/api/palette/flowcharts":
    get:
      tags:
      - Palettes
      summary: Finds elements belonging the palette of flowchart models
      description: Returns an empty array if no elements can be found
      operationId: get-flowchart-model-palette
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Flowchart_Model_Palette"
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Palettes
      summary: Add a new element to the palette for flowchart models
      description: Every request for addition of a new element to the pallete should be approved administrativelly before it could be used
      operationId: add-flowchart-model-palette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Palette element for the Flowchart Model that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Flowchart_Model_Palette_Create"
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:palette
        - read:palettes
  "/api/palette/gantts":
    get:
      tags:
      - Palettes
      summary: Finds elements belonging the palette of gantt models
      description: Returns an empty array if no elements can be found
      operationId: get-gantt-model-palette
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Gantt_Model_Palette"
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Palettes
      summary: Add a new element to the palette for gantt models
      description: Every request for addition of a new element to the pallete should be approved administrativelly before it could be used
      operationId: add-gantt-model-palette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Palette element for the Gantt Model that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Gantt_Model_Palette_Create"
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:palette
        - read:palettes
  "/api/palette/sequences":
    get:
      tags:
      - Palettes
      summary: Finds elements belonging the palette of sequence models
      description: Returns an empty array if no elements can be found
      operationId: get-sequence-model-palette
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Sequence_Model_Palette"
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Palettes
      summary: Add a new element to the palette for sequence models
      description: Every request for addition of a new element to the pallete should be approved administrativelly before it could be used
      operationId: add-sequence-model-palette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Palette element for the Sequence Model that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Sequence_Model_Palette_Create"
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:palette
        - read:palettes

  "/capabilities":
    get:
      tags:
        - Capabilities
      summary: Find capabilities
      description: Returns a list of capabilities.


        A capability is some characteristic that can be associated with an element within a model in order to describe some functional, non-functional, technical or behavioral attribute that such element could have. The  capability is used for appending meta-information around a general context organization state, or a specific use case, that is to say, defines a way to evaluate the component thru customized indicators external to the architecture
      operationId: get-capabilites
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Capability"
        '204':
          description: There are no capabilities
      security:
        - openarchi_auth:
            - read:capabilities
    post:
      tags:
        - Capabilities
      summary: Create a new capability
      description: Create a new capability.


        A capability is some characteristic that can be associated with an element within a model in order to describe some functional, non-functional, technical or behavioral attribute that such element could have. The  capability is used for appending meta-information around a general context organization state, or a specific use case, that is to say, defines a way to evaluate the component thru customized indicators external to the architecture.


        When attempting to create a capability, if the provided name already exists, such capability won't be created, instead, an error will be raised, otherwise, a new capability will be created being generated an automated UUID for it.
      operationId: create-capability
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Capability object that needs to be created
          required: true
          schema:
            $ref: "#/definitions/Capability_Create"
      responses:
        '201':
          description: Capability created
          headers:
            Location:
              type: string
              description: Relative URL for getting the created capability
        '405':
          description: Invalid capability object provided
      security:
        - openarchi_auth:
            - write:capabilities
  "/capabilities/{capability-id}/dimensions":
    get:
      tags:
        - Capabilities
      summary: Find dimensions from a provided capability
      description: Returns a list of dimensions from the provided capability.


        A dimension is a category that groups the common characteristics that have a set of defined metrics for the evaluation of the capability
      operationId: get-capability-dimensions
      produces:
        - application/json
      parameters:
        - name: capability-id
          in: path
          description: ID of the capability for retrieving its dimensions
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Dimension"
        '204':
          description: There are no dimensions for capability
        '404':
          description: Capability not found
      security:
        - openarchi_auth:
            - read:capabilities
    post:
      tags:
        - Capabilities
      summary: Create a new dimension within provided capability
      description: A dimension is a category that groups the common characteristics that have a set of defined metrics for the evaluation of a capability


        If the provided dimension's name already exists, it won't be created, instead, an error will be raised. If capability doesn't exists, an error will also be raised. Otherwise, a new dimension will be created and associated to the capability's dimensions list, being generated an automated UUID for it.
      operationId: create-capability-dimension
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: capability-id
          in: path
          description: ID of the capability in which the dimension will be created
          required: true
          type: string
        - name: body
          in: body
          description: Dimension object that is going to be created and associated to the provided capability
          required: true
          schema:
            $ref: "#/definitions/Dimension_Create"
      responses:
        '201':
          description: Dimension created
          headers:
            Location:
              type: string
              description: Relative URL for getting the created dimension
        '404':
          description: Capability not found
        '405':
          description: Invalid dimension object provided
      security:
        - openarchi_auth:
            - write:capabilities
  "/dimensions/{dimension-id}":
    get:
      tags:
        - Capabilities
      summary: Get a specific dimension by its ID
      description: Returns a specific dimension by ID including its metrics.


        A dimension is a category that groups the common characteristics that have a set of defined metrics for the evaluation of a capability.


        Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.

      operationId: get-dimension
      produces:
        - application/json
      parameters:
        - name: dimension-id
          in: path
          description: ID of the dimension to return
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Dimension"
        '404':
          description: Dimension not found
      security:
        - openarchi_auth:
            - read:capabilities
  "/dimensions/{dimension-id}/metrics":
    get:
      tags:
        - Capabilities
      summary: Find metrics from a provided dimension
      description: Returns a list of metrics from the provided dimension.


        Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.

      operationId: get-dimension-metrics
      produces:
        - application/json
      parameters:
        - name: dimension-id
          in: path
          description: ID of the dimension for retrieving its metrics
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Metric"
        '204':
          description: There are no metrics for provided dimension
        '404':
          description: Dimension not found
      security:
        - openarchi_auth:
            - read:capabilities
    post:
      tags:
        - Capabilities
      summary: Create a new metric within provided dimension
      description: Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.


        If the provided metric's name already exists, it won't be created, instead, an error will be raised. If dimension doesn't exists, an error will also be raised. Otherwise, a new metric will be created and associated to the dimension's metrics list, being generated an automated UUID for it.
      operationId: create-dimension-metric
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: dimension-id
          in: path
          description: ID of the dimension in which the metric will be created
          required: true
          type: string
        - name: body
          in: body
          description: Metric object that is going to be created and associated to the provided dimension
          required: true
          schema:
            $ref: "#/definitions/Metric_Create"
      responses:
        '201':
          description: Metric created
          headers:
            Location:
              type: string
              description: Relative URL for getting the created metric
        '404':
          description: Metric not found
        '405':
          description: Invalid metric object provided
      security:
        - openarchi_auth:
            - write:capabilities
  "/metrics/{metric-id}":
    get:
      tags:
        - Capabilities
      summary: Get a specific metric by its ID
      description: Returns a specific metric by ID including its thresholds.


        Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.

      operationId: get-metric
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric to return
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Metric"
        '404':
          description: Metric not found
      security:
        - openarchi_auth:
            - read:capabilities
  "/metrics/{metric-id}/base-thresholds":
    get:
      tags:
        - Capabilities
      summary: Find base thresholds from a provided metric
      description: Returns a list of base thresholds from the provided metric.


        Metrics define values and base thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.


        Base thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.

      operationId: get-metric-base-thresholds
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric for retrieving its base thresholds
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Base_Threshold"
        '204':
          description: There are no base thresholds for provided metric
        '404':
          description: metric not found
      security:
        - openarchi_auth:
            - read:capabilities
    put:
      tags:
        - Capabilities
      summary: Create a new base threshold within the provided metric
      description: Create a new base threshold within the provided metric.

        Metrics define values and base thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.


        Base thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.

        If the provided threshold's name already exists, it won't be created, instead, an error will be raised. If metric doesn't exists, an error will also be raised. Otherwise, a new base threshold will be created and associated to the metric's base thresholds list, being generated an automated UUID for it.
      operationId: create-metric-base-threshold
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric in which the base threshold will be created
          required: true
          type: string
        - name: body
          in: body
          description: Base threshold object that is going to be created and associated to the provided metric
          required: true
          schema:
            $ref: "#/definitions/Base_Threshold_Create"
      responses:
        '201':
          description: Base threshold created
          headers:
            Location:
              type: string
              description: Relative URL for getting the created base threshold
        '404':
          description: Base threshold not found
        '405':
          description: Invalid base threshold object provided
      security:
        - openarchi_auth:
            - write:capabilities
  "/metrics/{metric-id}/base-thresholds/{base-threshold-id}":
    get:
      tags:
        - Capabilities
      summary: Get a specific base threshold by its ID
      description: Returns a specific base threshold.


        Base thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.


      operationId: get-base-threshold
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric for retrieving its base thresholds
          required: true
          type: string
        - name: base-threshold-id
          in: path
          description: ID of the base threshold to return
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Base_Threshold"
        '404':
          description: Base threshold not found
      security:
        - openarchi_auth:
            - read:capabilities
  "/metrics/{metric-id}/thresholds":
    get:
      tags:
        - Capabilities
      summary: Find thresholds from a provided metric
      description: Returns a list of thresholds from the provided metric.


        Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.


        Thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.

      operationId: get-metric-thresholds
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric for retrieving its thresholds
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Threshold"
        '204':
          description: There are no thresholds for provided metric
        '404':
          description: metric not found
      security:
        - openarchi_auth:
            - read:capabilities
    put:
      tags:
        - Capabilities
      summary: Create a new threshold within the provided metric
      description: Create a new threshold within the provided metric.

        Metrics define values and thresholds that can be used in formulas to evaluate elements of the model according to the characteristics they have in relation to their underlying purpose.


        Thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.

        If the provided threshold's name already exists, it won't be created, instead, an error will be raised. If metric doesn't exists, an error will also be raised. Otherwise, a new threshold will be created and associated to the metric's thresholds list, being generated an automated UUID for it.
      operationId: create-metric-threshold
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric in which the threshold will be created
          required: true
          type: string
        - name: body
          in: body
          description: threshold object that is going to be created and associated to the provided metric
          required: true
          schema:
            $ref: "#/definitions/Threshold_Create"
      responses:
        '201':
          description: Threshold created
          headers:
            Location:
              type: string
              description: Relative URL for getting the created threshold
        '404':
          description: Threshold not found
        '405':
          description: Invalid Threshold object provided
      security:
        - openarchi_auth:
            - write:capabilities
  "/metrics/{metric-id}/thresholds/{threshold-id}":
    get:
      tags:
        - Capabilities
      summary: Get a specific threshold by its ID
      description: Returns a specific threshold.


        Thresholds are magnitudes or values that modify the interpretation of the metric if the measurement of a certain characteristic of the elements within a model reaches or exceeds them.


      operationId: get-threshold
      produces:
        - application/json
      parameters:
        - name: metric-id
          in: path
          description: ID of the metric for retrieving its base thresholds
          required: true
          type: string
        - name: threshold-id
          in: path
          description: ID of the threshold to return
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Threshold"
        '404':
          description: threshold not found
      security:
        - openarchi_auth:
            - read:capabilities

securityDefinitions:
  openarchi_auth:
    type: oauth2
    authorizationUrl: http://${DEPLOYED_SERVER}/login
    flow: implicit
    scopes:
      delete:model: Delete a model
      write:model: Modify or add a model
      read:models: Read models
      delete:catalog: Delete a catalog
      write:catalog: Modify or add a catalog
      read:catalogs: Read catalogs
      delete:palette: Delete a palette
      write:palette: Modify or add an element to a palette
      read:palettes: Read palette elements
      read:capabilities: Read capabilities
      write:capabilities: Write capabilities
      admin: Full administrative rights
definitions:
  Account:
    description: Account
    type: object
    properties:
      id:
        type: string
        description: Account identifier
      email:
        type: string
        description: Email of the account
      login:
        type: string
        description: Login
      password:
        type: string
        description: Password of the account
      firstAccess:
        type: boolean
        description: Indicator for showing whether this is the first access to the account or not
      roles:
        type: array
        description: Roles that an account have
        items:
          $ref: "#/definitions/Role"
  Account_Create:
    description: Account
    type: object
    properties:
      email:
        type: string
        description: Email of the account
      login:
        type: string
        description: Login
      password:
        type: string
        description: Password of the account
      roles:
        type: array
        description: Roles that an account have
        items:
          $ref: "#/definitions/Role_Create"
  Activity:
    description: Lane's activity
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
  Activity_Create:
    description: Lane's activity
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
  Architecture_Model:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumer"
        systems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/System"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Node"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship"
      required:
      - kind
  Architecture_Model_Create:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumer_Create"
        systems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/System_Create"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Node_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  Architecture_Model_Palette:
    description: Architecture model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
      systems:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
      containers:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
      components:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
      prototypes:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
  Architecture_Model_Palette_Create:
    description: Architecture model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item_Create"
  Architecture_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlies the relationship between architecture's components
        interactionStyle:
          type: string
          description: Type of interaction between architecture's components
          enum:
          - SYNCHRONOUS
          - ASYNCHRONOUS
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Architecture_Relationship_Create:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlies the relationship between architecture's components
        interactionStyle:
          type: string
          description: Type of interaction between architecture's components
          enum:
          - SYNCHRONOUS
          - ASYNCHRONOUS
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Base_Entity:
    type: object
    description: Basic entity info for managing a model
    properties:
      id:
        type: string
        description: Model identifier
      meta:
        $ref: "#/definitions/Meta_Info"
        description: Meta info related to the model
    required:
    - id
    - meta
  Base_Entity_Create:
    type: object
    description: Basic entity info for managing a model
    properties:
      meta:
        $ref: "#/definitions/Meta_Info_Create"
        description: Meta info related to the model
  BPM_Model:
    type: object
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pool"
        relationships:
          type: array
          items:
            $ref: "#/definitions/BPM_Relationship"
      required:
      - kind
  BPM_Model_Create:
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pool_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  BPM_Model_Palette:
    description: BPM model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
  BPM_Model_Palette_Create:
    description: BPM model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item_Create"
  BPM_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  BPM_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Base_Threshold:
    type: object
    description: Base threshold
    allOf:
      - $ref: "#/definitions/Capability_Base_Entity"
      - type: object
        properties:
          value:
            type: string
            description: Value for this threshold
    required:
      - value
  Base_Threshold_Create:
    type: object
    description: Base threshold creation
    properties:
      id:
        type: string
        description: Base threshold ID to be created
      value:
        type: string
        description: Value for this threshold
    required:
      - name
      - value
  Consumer:
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        scope:
          description: Scope on which this customer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        kind:
          type: string
          enum:
          - Consumer
  Consumer_Create:
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        scope:
          description: Scope on which this customer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        kind:
          type: string
          enum:
          - Consumer
  Container:
    type: object
    description: Container
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlied this container
        components:
          type: array
          description: Components that conforms this container
          items:
            $ref: "#/definitions/Component_Create"
  Container_Create:
    type: object
    description: Container
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlied this container
        components:
          type: array
          description: Components that conforms this container
          items:
            $ref: "#/definitions/Component_Create"
  Container_Instance:
    description: Container Instance
    type: object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        container:
          description: Container
          $ref: "#/definitions/Container"
        containerId:
          description: Container identifier
          type: string
        instanceId:
          description: Instance identifier
          type: integer
        kind:
          type: string
          description: Type of element
          enum:
          - CONTAINER
  Container_Instance_Create:
    description: Container Instance
    type: object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        container:
          description: Container
          $ref: "#/definitions/Container_Create"
        containerId:
          description: Container identifier
          type: string
        instanceId:
          description: Instance identifier
          type: integer
        kind:
          type: string
          description: Type of element
          enum:
          - CONTAINER
  Connect_Trigger:
    type: object
    description: Trigger for connecting an Item from or to any other Item
    properties:
      id:
        type: string
        description: Identifier of the trigger for connecting an Item from or to any other Item
      triggerById:
        type: string
        description: Identifier of an Item that can be connected from/to any other Item
      triggerByName:
        type: string
        description: Name of an Item that can be connected from/to any other Item
      triggerByExpression:
        type: string
        description: Regular expression, applied to the Item's name that can be connected from/to any other Item
  Connect_Trigger_Create:
    type: object
    description: Trigger for connecting an Item from or to any other Item
    properties:
      triggerById:
        type: string
        description: Identifier of an Item that can be connected from/to any other Item
      triggerByName:
        type: string
        description: Name of an Item that can be connected from/to any other Item
      triggerByExpression:
        type: string
        description: Regular expression, applied to the Item's name that can be connected from/to any other Item
  Component:
    description: Component
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        size:
          description: Components
          type: number
  Component_Create:
    description: Component
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        size:
          description: Components
          type: number
  Composite_Element:
    type: object
    description: A reference to a taggable element
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
        - SYSTEM
      link:
        type: string
        description: Link to the referenced element
    required:
    - id
    - type
  Composite_Element_Create:
    type: object
    description: A reference to a taggable element
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
      link:
        type: string
        description: Link to the referenced element
    required:
    - id
    - type
  Capability:
    type: object
    description: Capability
    allOf:
      - $ref: "#/definitions/Capability_Named_Base_Entity"
      - type: object
        properties:
          dimensions:
            type: array
            description: Dimensions within a capability
            items:
              $ref: "#/definitions/Dimension"
  Capability_Create:
    type: object
    description: Capability creation
    properties:
      name:
        type: string
        description: Capability name to be created
    required:
      - name
  Capability_Base_Entity:
    type: object
    description: Basic entity info for capabilities model
    properties:
      id:
        type: string
        description: Identifier
    required:
      - id
  Capability_Named_Base_Entity:
    type: object
    description: Basic entity info for capabilities model
    properties:
      id:
        type: string
        description: Identifier
      name:
        type: string
        description: Name
    required:
      - id
      - name
  Dimension:
    type: object
    description: Dimension
    allOf:
      - $ref: "#/definitions/Capability_Named_Base_Entity"
      - type: object
        properties:
          metrics:
            type: array
            description: Metric of a dimension
            items:
              $ref: "#/definitions/Metric"
  Dimension_Create:
    type: object
    description: Dimension creation
    properties:
      name:
        type: string
        description: Dimension name to be created
    required:
      - name
  Element:
    type: object
    description: Abstract element object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        url:
          type: string
          description: Url for the physical access to the of model
        properties:
          type: object
          description: Extensible and customizable properties related to an element
          additionalProperties:
            type: string
        features:
          type: array
          description: Features that conforms the model
          items:
            $ref: "#/definitions/Feature"
  Element_Create:
    type: object
    description: Abstract element object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        url:
          type: string
          description: Url for the physical access to the of model
        properties:
          type: object
          description: Extensible and customizable properties related to an element
          additionalProperties:
            type: string
        features:
          type: array
          description: Features that conforms the model
          items:
            $ref: "#/definitions/Feature_Create"
  Element_Shape:
    type: object
    description: Shape related to an element according its type
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      colorSchemes:
        description: Color scheme of the shape
        type: array
        items:
          $ref: "#/definitions/Color_Scheme"
      input:
        type: boolean
        default: true
      output:
        type: boolean
        default: true
    required:
    - id
    - type
  Element_Shape_Create:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      type:
        type: string
        description: Shape type
        enum:
          #Commons
          - PERSON
          - CONSUMER
          - DEFAULT
          - ITEM
          - FEATURE
          #Architectures
          - ARCHITECTURE_MODEL
          - LAYER
          - SYSTEM
          - CONTAINER
          - COMPONENT
          - DEPLOYMENT
          #Bpms
          - BPM_MODEL
          - BPM
          - POOL
          - LANE
          - ACTIVITY
          #Flowcharts
          - FLOWCHART_MODEL
          - FLOWCHART_INITIATOR
          - FLOWCHART_FINISHER
          - FLOWCHART_CONDITION
          #Sequences
          - SEQUENCE_MODEL
          - SEQUENCE
          #Gantts
          - GANTT_MODEL
          - GANTT
          #EntityRelationships
          - ENTITY_RELATIONSHIP_MODEL
          - ENTITY
          - ATTRIBUTE
          #UMLClasses
          - UML_CLASS_MODEL
          - CLASS
          - METHOD
          - FIELD
          - PARAMETER
          #Components
          - COMPONENT_MODEL
          - GROUP
          - ELEMENT
      colorSchemes:
        description: Color scheme of the shape
        type: array
        items:
          $ref: "#/definitions/Color_Scheme_Create"
      input:
         type: boolean
         default: true
      output:
         type: boolean
         default: true
    required:
    - id
    - type
  Element_Role:
    type: object
    description: Element role
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        name:
          type: string
          description: Name of the role
  Element_Role_Create:
    type: object
    description: Element role
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        name:
          type: string
          description: Name of the role
  Deployment_Node:
    description: Deployment Node
    type: object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        instances:
          description: Instances
          type: integer
        kind:
          type: string
          description: Type of element
          enum:
          - DEPLOYMENT
        containerInstances:
          type: array
          items:
            $ref: "#/definitions/Container_Instance"
  Deployment_Node_Create:
    description: Deployment Node
    type: object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        instances:
          description: Instances
          type: integer
        kind:
          type: string
          description: Type of element
          enum:
          - DEPLOYMENT
        containerInstances:
          type: array
          items:
            $ref: "#/definitions/Container_Instance_Create"
  Feature:
    description: Feature an element can handle
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        type:
          type: string
          description: the role of the feature ... Primary or Supporting
          enum:
          - Primary
          - Supporting
        url:
          type: string
          description: a URL; e.g. a reference to the feature in source code control
        visibility:
          type: string
          description: the visibility of the feature; e.g. public, package, private
        incomingConstraints:
          type: array
          description: Aspects that conditionates an element can have this feature
          items:
            $ref: "#/definitions/Constraint"
        outgoingConstraints:
          type: array
          description: Aspects that conditionates how this feature can be related to another element
          items:
            $ref: "#/definitions/Constraint"
        kind:
          type: string
          enum:
          - FEATURE
  Feature_Create:
    description: Feature an element can handle
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        type:
          type: string
          description: the role of the feature ... Primary or Supporting
          enum:
          - Primary
          - Supporting
        url:
          type: string
          description: a URL; e.g. a reference to the feature in source code control
        visibility:
          type: string
          description: the visibility of the feature; e.g. public, package, private
        incomingConstraints:
          type: array
          description: Aspects that conditionates an element can have this feature
          items:
            $ref: "#/definitions/Constraint_Create"
        outgoingConstraints:
          type: array
          description: Aspects that conditionates how this feature can be related to another element
          items:
            $ref: "#/definitions/Constraint_Create"
        kind:
          type: string
          enum:
          - FEATURE
  Flowchart_Model:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship"
      required:
      - kind
  Flowchart_Model_Create:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship_Create"
      required:
      - kind
  Flowchart_Model_Palette:
    description: Flowchart model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
  Flowchart_Model_Palette_Create:
    description: Flowchart model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item_Create"
  Flowchart_Relationship:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Flowchart_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Flowchart:
    type: object
    description: Flowchart
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - DECISION_POINT
          - START
          - END
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART
      required:
      - category
      - kind
  Flowchart_Create:
    type: object
    description: Flowchart
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - DECISION_POINT
          - START
          - END
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART
      required:
      - category
      - kind
  Flowchart_Models_Create:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship_Create"
      required:
      - kind
  Gantt:
    type: object
    description: Gantt
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - START
          - END
        diagramStart:
          type: integer
          description: Start of the Gantt's activity
        diagramEnd:
          type: integer
          description: End of the Gantt's activity
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT
      required:
      - category
      - kind
  Gantt_Create:
    type: object
    description: Gantt
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - START
          - END
        diagramStart:
          type: integer
          description: Start of the Gantt's activity
        diagramEnd:
          type: integer
          description: End of the Gantt's activity
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT
      required:
      - category
      - kind
  Gantt_Model:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantt"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationship"
      required:
      - kind
  Gantt_Model_Create:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantt_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationship"
      required:
      - kind
  Gantt_Model_Palette:
    description: Gantt model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item_Create"
  Gantt_Model_Palette_Create:
    description: Gantt model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
  Gantt_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Gantt_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Generic_Id_Name:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
        enum:
        - GANTT_MODEL
        - ARCHITECTURE_MODEL
        - SEQUENCE_MODEL
        - BPM_MODEL
        - FLOWCHART_MODEL
        - ENTITY_RELATIONSHIP_MODEL
  History:
    type: object
    description: History of versions for any object
    properties:
      id:
        type: string
        description: History identifier
      version:
        $ref: "#/definitions/Version"
        description: Version of the object
      versionStatus:
        type: string
        enum:
          - INITIAL
          - ACTIVE
          - ARCHIVED
        default: INITIAL
      modifiedBy:
        $ref: "#/definitions/Account"
        description: Account that modifies the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - id
    - version
    - modifiedBy
  History_List:
    type: object
    description: History of versions for any object
    properties:
      id:
        type: string
        description: History identifier
      version:
        $ref: "#/definitions/Version"
        description: Version of the object
      versionStatus:
        type: string
        enum:
          - INITIAL
          - ACTIVE
          - ARCHIVED
        default: INITIAL
      modifiedBy:
        $ref: "#/definitions/Account"
        description: Account that modifies the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - id
    - version
    - modifiedBy
  History_Create:
    type: object
    description: History of versions for any object
    properties:
      version:
        $ref: "#/definitions/Version"
        description: Version of the object
      versionStatus:
        type: string
        enum:
          - INITIAL
          - ACTIVE
          - ARCHIVED
        default: INITIAL
      modifiedBy:
        $ref: "#/definitions/Account"
        description: Account that modifies the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - version
    - modifiedBy
  Image:
    type: object
    description: Image that graphically identifies an element within the model
    properties:
      id:
        type: string
        description: Image identifier. Each enumerated value represents a valid mime type for the image
      type:
        type: string
        description: Image type
        enum:
        - BMP
        - VND
        - GIF
        - JPEG
        - PNG
        - SVG
      raw:
        type: string
        description: Represents a byte array with the content of the image.
      url:
        type: string
        description: Full URL path on which this image can be found. Request on this resoource should be accompanied with the mime type related to the image
    required:
    - id
    - type
  Image_Create:
    type: object
    description: Image that graphically identifies an element within the model
    properties:
      type:
        type: string
        description: Image type
        enum:
        - BMP
        - VND
        - GIF
        - JPEG
        - PNG
        - SVG
      raw:
        type: string
        description: Represents a byte array with the content of the image.
      url:
        type: string
        description: Full URL path on which this image can be found. Request on this resoource should be accompanied with the mime type related to the image
    required:
    - type
    - raw
  Item:
    type: object
    description: Abstract item object
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        name:
          type: string
          description: Model name
        kind:
          type: string
          description: Type of element
          enum:
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - BPM
        description:
          type: string
          description: Long description of model
        location:
          $ref: "#/definitions/Point"
          description: Long description of model
        parent:
          $ref: "#/definitions/Composite_Element"
          description: Long description of model
        children:
          type: array
          description: Children of the model
          items:
            $ref: "#/definitions/Composite_Element"
        shape:
          $ref: "#/definitions/Shape"
          description: Shape on which this element should be represented
        image:
          $ref: "#/definitions/Image"
          description: Image that identified this element
        canBeConnectedFrom:
          type: array
          description: Origin elements from which it is allowed to connect to this item
          items:
            $ref: "#/definitions/Connect_Trigger"
        canBeConnectedTo:
          type: array
          description: Target elements to which this item can be connected
          items:
            $ref: "#/definitions/Connect_Trigger"
        metaData:
          $ref: "#/definitions/Meta_Data"
          description: Meta data associated with the model
        prototype:
          type: boolean
          description: Flag that indicates this item is a prototype
      discriminator: kind
  Item_Create:
    type: object
    description: Abstract item object
    allOf:
    - $ref: "#/definitions/Taggable_Create"
    - type: object
      properties:
        name:
          type: string
          description: Model name
        kind:
          type: string
          description: Type of element
          enum:
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - BPM
        description:
          type: string
          description: Long description of model
        location:
          $ref: "#/definitions/Point_Create"
          description: Long description of model
        parent:
          $ref: "#/definitions/Composite_Element_Create"
          description: Long description of model
        children:
          type: array
          description: Children of the model
          items:
            $ref: "#/definitions/Composite_Element_Create"
        shape:
          $ref: "#/definitions/Shape_Create"
          description: Shape on which this element should be represented
        image:
          $ref: "#/definitions/Image_Create"
          description: Image that identified this element
        canBeConnectedFrom:
          type: array
          description: Origin elements from which it is allowed to connect to this item
          items:
            $ref: "#/definitions/Connect_Trigger_Create"
        canBeConnectedTo:
          type: array
          description: Target elements to which this item can be connected
          items:
            $ref: "#/definitions/Connect_Trigger_Create"
        metaData:
          $ref: "#/definitions/Meta_Data_Create"
          description: Meta data associated with the model
        prototype:
          type: boolean
          description: Flag that indicates this item is a prototype
      discriminator: kind
  Lane:
    description: Pool's lane
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        activities:
          type: array
          description: Activities in the lane
          items:
            $ref: "#/definitions/Activity"
  Lane_Create:
    description: Pool's lane
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        activities:
          type: array
          description: Activities in the lane
          items:
            $ref: "#/definitions/Activity"
  Layer:
    description: Layer
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        scope:
          description: Scope on which this layer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this layer
          type: array
          items:
            $ref: "#/definitions/Container"
  Layer_Create:
    description: Layer
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        scope:
          description: Scope on which this layer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this layer
          type: array
          items:
            $ref: "#/definitions/Container_Create"
  Meta_Data:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        views:
          type: array
          items:
            $ref: "#/definitions/View"
  Meta_Data_List:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        views:
          type: array
          items:
            $ref: "#/definitions/View"
  Meta_Data_Create:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible_Create"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible_Create"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable_Create"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable_Create"
        views:
          type: array
          items:
            $ref: "#/definitions/View_Create"
  Meta_Info:
    type: object
    description: Meta info for any object
    properties:
      id:
        type: string
        description: Meta info identifier
      history:
        type: array
        items:
          $ref: "#/definitions/History"
        description: History of the object
      createdBy:
        $ref: "#/definitions/Account"
        description: Account that creates the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
    required:
    - id
    - createdBy
  Meta_Info_List:
    type: object
    description: Meta info for any object
    properties:
      id:
        type: string
        description: Meta info identifier
      history:
        type: array
        items:
          $ref: "#/definitions/History"
        description: History of the object
      createdBy:
        $ref: "#/definitions/Account"
        description: Account that creates the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
    required:
    - id
    - createdBy
  Meta_Info_Create:
    type: object
    description: Meta info for any object
    properties:
      history:
        type: array
        items:
          $ref: "#/definitions/History_Create"
      createdBy:
        $ref: "#/definitions/Account_Create"
        description: Account that creates the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
    required:
    - version
    - createdBy
  Model:
    description: Model object
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Model"
    - $ref: "#/definitions/BPM_Model"
    - $ref: "#/definitions/Flowchart_Model"
    - $ref: "#/definitions/Gantt_Model"
    - $ref: "#/definitions/Sequence_Model"
  Model_Create:
    description: Model object to be created
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Model_Create"
    - $ref: "#/definitions/BPM_Model_Create"
    - $ref: "#/definitions/Flowchart_Model_Create"
    - $ref: "#/definitions/Gantt_Model_Create"
    - $ref: "#/definitions/Sequence_Model_Create"
  Model_Parent_Create:
    description: A reference to a taggable element
    type: object
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM

  Metric:
    type: object
    description: Metric
    allOf:
      - $ref: "#/definitions/Capability_Named_Base_Entity"
      - type: object
        properties:
          baseThreshold:
            $ref: "#/definitions/Base_Threshold"
          thresholds:
            type: array
            description: Additional, complementary and optional thresholds to be appended to the base threshold
            items:
              $ref: "#/definitions/Threshold"

  Metric_Create:
    type: object
    description: Metric creation
    properties:
      name:
        type: string
        description: Metric name to be created
    required:
      - name
  Options_Input_Item:
    type: object
    properties:
      input:
        type: object
  Options_Input_Id_Name_Item:
    type: object
    properties:
      input:
        $ref: '#/definitions/Generic_Id_Name'
  Options_Output_Item:
    type: object
    properties:
      output:
        type: object
  Options_Input_Collection_Item:
    type: object
    properties:
      output:
        type: array
        items:
          type: object
  Options_Output_Collection_Item:
    type: object
    properties:
      output:
        type: array
        items:
          type: object
  Options_Output_Collection_Id_Name_Item:
    type: object
    properties:
      output:
        type: array
        items:
          $ref: '#/definitions/Generic_Id_Name'
  Options_Get_String_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        type: string
  Options_Get_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Collection_Item'
  Options_Get_Id_Name_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Collection_Id_Name_Item'
  Options_Get:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Item'
  Options_Post:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        $ref: '#/definitions/Options_Input_Item'
  Options_Post_Id_Name:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        $ref: '#/definitions/Options_Input_Id_Name_Item'
  Options_Post_String:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        type: string
  Options_Post_Collection:
    description: Generic object to expose endpoint functionalitites for batching input processing
    properties:
      post:
        $ref: '#/definitions/Options_Input_Collection_Item'
  Options_Put:
    description: Generic object to expose endpoint functionalitites
    properties:
      put:
        $ref: '#/definitions/Options_Input_Item'
  Options_Patch:
    description: Generic object to expose endpoint functionalitites
    properties:
      patch:
        $ref: '#/definitions/Options_Input_Item'
      head:
        $ref: '#/definitions/Options_Output_Item'
  Options_Head:
    description: Generic object to expose endpoint functionalitites
    properties:
      head:
        $ref: '#/definitions/Options_Output_Item'
  Palette_Item:
    description: Commons palette item to all kind of palettes
    type: object
    allOf:
    - $ref: "#/definitions/Palette_Info"
    - type: object
      properties:
        shapeType:
          type: string
          description: Type of palette item
          enum:
          - Person
          - RoundedRectangle
          - Rectangle
          - Diamond
          - Ellipse
          - Consumer
        rank:
          type: integer
  Palette_Item_Create:
    description: Commons palette item to all kind of palettes
    type: object
    allOf:
    - $ref: "#/definitions/Palette_Info_Create"
    - type: object
      properties:
        shapeType:
          type: string
          description: Type of palette item
          enum:
          - Person
          - RoundedRectangle
          - Rectangle
          - Diamond
          - Ellipse
          - Consumer
        rank:
          type: integer
  Palette_Info:
    description: Commons palette information
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      kind:
        type: string
        enum: 
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - Consumer
        - CONTAINER
        - DEPLOYMENT
        - BPM
  Palette_Info_Create:
    description: Commons palette information
    type: object
    properties:
      name:
        type: string
      kind:
        type: string
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - Consumer
        - CONTAINER
        - DEPLOYMENT
        - BPM
  Pool:
    description: BPM's pool
    type: object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        lanes:
          type: array
          description: Lanes in the pool
          items:
            $ref: "#/definitions/Lane"
  Pool_Create:
    description: BPM's pool
    type: object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        lanes:
          type: array
          description: Lanes in the pool
          items:
            $ref: "#/definitions/Lane_Create"
  Point:
    type: object
    description: Coordinates on which the model is located
    properties:
      x:
        type: number
        description: Relative x coordinate of the point on which the model is located
      y:
        type: number
        description: Relative y coordinate of the point on which the model is located
      z:
        type: number
        description: Relative z coordinate of the point on which the model is located
    required:
    - x
    - y
  Point_Create:
    type: object
    description: Coordinates on which the model is located
    properties:
      x:
        type: number
        description: Relative x coordinate of the point on which the model is located
      y:
        type: number
        description: Relative y coordinate of the point on which the model is located
      z:
        type: number
        description: Relative z coordinate of the point on which the model is located
    required:
    - x
    - y
  Person:
    description: Person
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        names:
          type: string
          description: Names of the person
        lastNames:
          type: string
          description: Lastname(s) of the person
      required:
      - names
      - lastNames
  Person_Create:
    description: Person
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        names:
          type: string
          description: Names of the person
        lastNames:
          type: string
          description: Lastname(s) of the person
      required:
      - names
      - lastNames
  Responsible:
    description: Person that is responsible of a specific component of a model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        organizationUnit:
          type: string
          description: Organization unit to which the responsible belongs to
        responsible:
          $ref: "#/definitions/Person"
          description: Person that is responsible of a specific component of a model
      required:
      - organizationUnit
      - responsible
  Responsible_Create:
    description: Person that is responsible of a specific component of a model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        organizationUnit:
          type: string
          description: Organization unit to which the responsible belongs to
        responsible:
          $ref: "#/definitions/Person_Create"
          description: Person that is responsible of a specific component of a model
      required:
      - organizationUnit
      - responsible
  Relationship:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        source:
          $ref: "#/definitions/Taggable"
          description: Model acting as source of the relationship
        sourceId:
          type: string
          description: Long description of model
        destination:
          $ref: "#/definitions/Taggable"
          description: Model acting as destination of the relationship
        destinationId:
          type: string
          description: Identifier of the model acting as destination of the relationship
        description:
          type: string
          description: Long description of the relationship
        sourcePort:
          type: string
          description: Port of the model acting as source of the relationship
        destinationPort:
          type: string
          description: Port of the model acting as destination of the relationship
      required:
      - sourceId
      - destinationId
  Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Taggable_Create"
    - properties:
        sourceId:
          type: string
          description: Identifier of the model acting as source of the relationship
        destinationId:
          type: string
          description: Identifier of the model acting as destination of the relationship
        description:
          type: string
          description: Long description of the relationship
        sourcePort:
          type: string
          description: Port of the model acting as source of the relationship
        destinationPort:
          type: string
          description: Port of the model acting as destination of the relationship
      required:
      - sourceId
      - destinationId
  Role:
    description: A role an account could have
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      priority:
        type: integer
  Role_Create:
    description: A role an account could have
    type: object
    properties:
      name:
        type: string
      priority:
        type: integer
  Rule_Message:
    description: Rule message
    type: object
    properties:
      type:
        type: string
        enum:
          - SUCCESS
          - DEBUG
          - WARNING
          - ERROR
          - INFO
      language:
        type: string
      ruleName:
        type: string
      comment:
        type: string
      expectedValue:
        type: string
      parent:
        type: string
      fieldName:
        type: string
      object:
        type: object
  Shape:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
          - PERSON
          - DEFAULT
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - COMPONENT
          - CONSUMER
          - CONTAINER
          - DEPLOYMENT
          - BPM
          - SYSTEM
          - GROUP
          - LAYER
      colorSchemes:
        description: Color scheme of the shape
        type: array
        items:
          $ref: "#/definitions/Color_Scheme"
      input:
        type: boolean
        default: true
      output:
        type: boolean
        default: true
    required:
    - id
    - type
  Shape_Create:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
          - PERSON
          - DEFAULT
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - COMPONENT
          - CONSUMER
          - CONTAINER
          - DEPLOYMENT
          - BPM
          - SYSTEM
          - GROUP
          - LAYER
      colorSchemes:
        type: array
        items:
          $ref: "#/definitions/Color_Scheme_Create"
      input:
         type: boolean
         default: true
      output:
         type: boolean
         default: true
    required:
    - id
    - type
  Color_Scheme:
    description: Color scheme
    type: object
    properties:
      name:
        type: string
        description: Name of the color scheme
        enum:
        - PRIMARY
        - SECONDARY
      fillColor:
        type: string
        description: Color of the fill or backgound of the shape or element. It can be a named color of it corresponding RGB code
      strokeColor:
        type: string
        description: Color of the stroke or line-border of the shape or element. It can be a named color of it corresponding RGB code
      textColor:
        type: string
        description: Color of the text associated of the shape or element. It can be a named color of it corresponding RGB code
  Color_Scheme_Create:
    description: Color Scheme
    type: object
    properties:
      name:
        type: string
        description: Name of the color scheme
        enum:
        - PRIMARY
        - SECONDARY
      fillColor:
        type: string
        description: Color of the fill or backgound of the shape or element. It can be a named color of it corresponding RGB code
      strokeColor:
        type: string
        description: Color of the stroke or line-border of the shape or element. It can be a named color of it corresponding RGB code
      textColor:
        type: string
        description: Color of the text associated of the shape or element. It can be a named color of it corresponding RGB code
  Sequence:
    description: Sequence
    type: object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        start:
          type: integer
          description: Start of the sequence's activity
        duration:
          type: integer
          description: Duration of the sequence's activity
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
      required:
      - kind
  Sequence_Create:
    description: Sequence
    type: object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        start:
          type: integer
          description: Start of the sequence's activity
        duration:
          type: integer
          description: Duration of the sequence's activity
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
      required:
      - kind
  Sequence_Model:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  Sequence_Model_Create:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  Sequence_Model_Palette:
    description: Sequence model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item"
  Sequence_Model_Palette_Create:
    description: Sequence model palette
    type: object
    properties:
      elements:
        type: array
        items:
          $ref: "#/definitions/Palette_Item_Create"
  Sequence_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Sequence_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Sequence_Models_Create:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  System:
    description: System
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        scope:
          description: Scope on which this system is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this system
          type: array
          items:
            $ref: "#/definitions/Container"
  System_Create:
    description: System
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        scope:
          description: Scope on which this system is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this system
          type: array
          items:
            $ref: "#/definitions/Container_Create"
  Static_Element:
    type: object
    description: Static element
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          description: Type of static element
          type: string
          enum:
          - COMPONENT
      required:
      - kind
  Static_Element_Create:
    type: object
    description: Static element
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          description: Type of static element
          type: string
          enum:
          - COMPONENT
      required:
      - kind
  Taggable:
    description: Instantiable model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        tags:
          type: array
          description: Tags of the model
          items:
            type: string
        status:
          type: string
          enum:
          - INITIAL
          - PROPOSAL
          - IN_PROGRESS
          - PUBLISHED
          - DEPRECATED
      required:
      - id
  Taggable_Create:
    description: Instantiable model
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        tags:
          type: array
          description: Tags of the model
          items:
            type: string
        status:
          type: string
          enum:
          - INITIAL
          - PROPOSAL
          - IN_PROGRESS
          - PUBLISHED
          - DEPRECATED
  Threshold:
    type: object
    description: Threshold
    allOf:
      - $ref: "#/definitions/Base_Threshold"
      - type: object
        properties:
          overridesBase:
            type: boolean
            description: Indicates whether this threshold overrides the same one (by ID) from base threshold.
  Threshold_Create:
    type: object
    description: Threshold creation
    allOf:
      - $ref: "#/definitions/Base_Threshold_Create"
  Constraint:
    type: object
  Constraint_Create:
    type: object
  Version:
    type: object
    description: Version
    properties:
      id:
        $ref: "#/definitions/Version_Id"
        description: Version identifier
    required:
    - id
  Version_Create:
    type: object
    description: Version
    properties:
      id:
        $ref: "#/definitions/Version_Id_Create"
        description: Version identifier
    required:
    - id
  Version_Id:
    type: object
    description: Version identifier
    properties:
      major:
        type: integer
        description: Major part of the version
      minor:
        type: integer
        description: Minor part of the version
      build:
        type: integer
        description: Build part of the version
    required:
    - major
    - minor
    - build
  Version_Id_Create:
    type: object
    description: Version
    properties:
      major:
        type: integer
        description: Major part of the version
      minor:
        type: integer
        description: Minor part of the version
      build:
        type: integer
        description: Build part of the version
    required:
    - major
    - minor
    - build
  View:
    description: View of the model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        name:
          type: string
          description: Name of the view
      required:
      - name
  View_Create:
    description: View of the model
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        name:
          type: string
          description: Name of the view
      required:
      - name
      