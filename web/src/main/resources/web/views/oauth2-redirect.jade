body(onload="run()")

script.
    'use strict'
    let requestedScopes = [];
    if ('!{scope_}') {
        requestedScopes = JSON.parse('!{scope_}');
    }
    let rejectedScopes = [];
    if ('!{rejected_scopes_}') {
        rejectedScopes = JSON.parse('!{rejected_scopes_}');
    }
    let requestedResponseType;
    if ('!{response_type}') {
        requestedResponseType = '!{response_type}';
    }
    let requestedState;
    if ('!{state}') {
        requestedState = '!{state}';
    }
    let requestedClientId;
    if ('!{client_id}') {
        requestedClientId = '!{client_id}';
    }

    function run() {
        const oauth2 = window.opener.swaggerUIRedirectOauth2;
        const sentState = oauth2.state;
        const sentScopes = oauth2.auth.scopes;
        const redirectUrl = oauth2.redirectUrl;
        let isValid, qp, arr;

        if (/code|token|error/.test(window.location.hash)) {
            qp = window.location.hash.substring(1);
        } else {
            qp = location.search.substring(1);
        }
        if (qp) {
            arr = qp.split("&");
            arr.forEach(function (v, i, _arr) {
                _arr[i] = '"' + v.replace('=', '":"') + '"';
            });
            qp = qp ? JSON.parse('{' + arr.join() + '}',
                function (key, value) {
                    return key === "" ? value : decodeURIComponent(value)
                }
            ) : {};
            isValid = qp.state === sentState;
        } else {
            isValid = requestedState === sentState || (requestedState + "==") === sentState;
        }

        let errorMessages = "";

        if (!isValid) {
            errorMessages = "Authorization may be unsafe, passed state was changed in server Passed state wasn't returned from auth server";
        }
        if (rejectedScopes.length !== 0) {
            errorMessages = (errorMessages <= "" ? "" : errorMessages + "\n\n") + "Not all scopes are accepted. Scopes approved: " + (requestedScopes.length > 0 ? requestedScopes : "none" ) + ". Scopes rejected: " + rejectedScopes;
        }
        if (errorMessages) {
            oauth2.errCb({
                authId: oauth2.auth.name,
                source: "auth",
                level: "warning",
                message: errorMessages
            });
        }
        oauth2.auth.scope = requestedScopes;
        const hasEnoughScopes = requestedScopes.length === 0;
        if ((
                oauth2.auth.schema.get("flow") === "accessCode" ||
                oauth2.auth.schema.get("flow") === "authorizationCode"
            ) && !oauth2.auth.code) {

            if (qp.code) {
                delete oauth2.state;
                oauth2.auth.code = qp.code;
                if (hasEnoughScopes) {
                    oauth2.auth.scheme = null;
                }
                oauth2.callback({
                    auth: oauth2.auth,
                    redirectUrl: redirectUrl
                });
            } else {
                oauth2.errCb({
                    authId: oauth2.auth.name,
                    source: "auth",
                    level: "error",
                    message: "Authorization failed: no accessCode received from the server"
                });
            }
        } else {
            if (hasEnoughScopes) {
                oauth2.auth.scheme = null;
            }
            oauth2.callback({
                auth: oauth2.auth,
                token: qp,
                isValid: isValid || hasEnoughScopes,
                redirectUrl: redirectUrl
            });
        }
        window.close();
    }
